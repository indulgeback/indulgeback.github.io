import{_ as s,c as a,G as i,b as n}from"./chunks/framework.BrC0DRXd.js";const e=JSON.parse('{"title":"vue3 Ⅷ vue 常见优化手段","description":"vue3 Ⅷ vue 常见优化手段，包括永远不要过早优化、使用 key、使用冻结的对象、使用函数式组件、使用计算属性、非实时绑定的表单项、保持对象引用稳定、使用 v-show 替代 v-if、使用延迟装载（defer）。","frontmatter":{"title":"vue3 Ⅷ vue 常见优化手段","date":"2023-04-30T00:00:00.000Z","author":"liuwy","categories":["技术"],"tags":["Javascript","Vue"],"description":"vue3 Ⅷ vue 常见优化手段，包括永远不要过早优化、使用 key、使用冻结的对象、使用函数式组件、使用计算属性、非实时绑定的表单项、保持对象引用稳定、使用 v-show 替代 v-if、使用延迟装载（defer）。","articleGPT":"vue3 Ⅷ vue 常见优化手段，包括永远不要过早优化、使用 key、使用冻结的对象、使用函数式组件、使用计算属性、非实时绑定的表单项、保持对象引用稳定、使用 v-show 替代 v-if、使用延迟装载（defer）。","head":[["link",{"rel":"canonical","href":"https://blog.imsyy.top/posts/Vue/8、vue3 Ⅷ vue 常见优化手段"}]]},"headers":[],"relativePath":"posts/Vue/8、vue3 Ⅷ vue 常见优化手段.md","filePath":"posts/Vue/8、vue3 Ⅷ vue 常见优化手段.md","lastUpdated":1740135853000}');const l=s({name:"posts/Vue/8、vue3 Ⅷ vue 常见优化手段.md"},[["render",function(s,e,l,p,t,h){return n(),a("div",null,e[0]||(e[0]=[i('<h3 id="_0-永远不要过早优化" tabindex="-1">0.永远不要过早优化 <a class="header-anchor" href="#_0-永远不要过早优化" aria-label="Permalink to &quot;0.永远不要过早优化&quot;">​</a></h3><blockquote><p>所有命运馈赠的礼物，早已在暗中标好了价格。 ——茨威格</p><p>优化解决了一个问题，也许就会带来新的问题。</p></blockquote><h3 id="_1-使用-key" tabindex="-1">1.使用 key <a class="header-anchor" href="#_1-使用-key" aria-label="Permalink to &quot;1.使用 key&quot;">​</a></h3><blockquote><p>对于通过循环生成的列表，应给每个列表项一个==稳定且唯一==的 key ，这有利于在列表变动时，尽量少的删除、新增、改动元素。</p></blockquote><h3 id="_2-使用冻结的对象" tabindex="-1">2.使用冻结的对象 <a class="header-anchor" href="#_2-使用冻结的对象" aria-label="Permalink to &quot;2.使用冻结的对象&quot;">​</a></h3><blockquote><p>将不需要遍历的数据冻结，这样 vue 便不会将这些数据响应化，可以节省时间</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 冻结一个对象，他的属性值无法被更改</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">freeze</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 判断一个对象是否被冻结，该函数返回值为 Boolean</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isFrozen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_3-使用函数式组件" tabindex="-1">3.使用函数式组件 <a class="header-anchor" href="#_3-使用函数式组件" aria-label="Permalink to &quot;3.使用函数式组件&quot;">​</a></h3><blockquote><p>函数式组件比较简单，没有管理任何状态，也没有监听任何传递给它的状态，也没有生命周期方法，只接受一些 prop 的函数，我们可以将组件标记为 functional ，这意味着它无状态（没有响应式数据），也没有实例（没有 this 上下文）：</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vue2</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-component&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  functional: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Props 是可选的</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  props: {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 为了弥补缺少的实例</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 提供第二个参数作为上下文</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>函数式组件是一种定义自身没有任何状态的组件的方式。它们很像纯函数：接收 props，返回 vnodes。函数式组件在渲染过程中不会创建组件实例 (也就是说，没有 <code>this</code>)，也不会触发常规的组件生命周期钩子。</p><p>我们用一个普通的函数而不是一个选项对象来创建函数式组件。该函数实际上就是该组件的渲染函数。</p><p>而因为函数式组件里没有 <code>this</code> 引用，Vue 会把 <code>props</code> 当作第一个参数传入：</p><p>第二个参数 <code>context</code> 包含三个属性：<code>attrs</code>、<code>emit</code> 和 <code>slots</code>。它们分别相当于组件实例的 <a href="https://cn.vuejs.org/api/component-instance.html#attrs" target="_blank" rel="noreferrer"><code>$attrs</code></a>、<a href="https://cn.vuejs.org/api/component-instance.html#emit" target="_blank" rel="noreferrer"><code>$emit</code></a> 和 <a href="https://cn.vuejs.org/api/component-instance.html#slots" target="_blank" rel="noreferrer"><code>$slots</code></a> 这几个属性。</p><p>大多数常规组件的配置选项在函数式组件中都不可用，除了 <a href="https://cn.vuejs.org/api/options-state.html#props" target="_blank" rel="noreferrer"><code>props</code></a> 和 <a href="https://cn.vuejs.org/api/options-state.html#emits" target="_blank" rel="noreferrer"><code>emits</code></a>。我们可以给函数式组件添加对应的属性来声明它们：</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vue3</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>原因：对于函数式组件 vue 是不会为它创建组件实例，函数式组件是用来进行纯渲染的！</p><p>vue 会对每一个组件创建一个 vueComponent 组件</p></blockquote><h3 id="_4-使用计算属性" tabindex="-1">4.使用计算属性 <a class="header-anchor" href="#_4-使用计算属性" aria-label="Permalink to &quot;4.使用计算属性&quot;">​</a></h3><blockquote><p>如果模板中某个数据会使用多次，并且该数据是通过计算得到的，使用计算属性以缓存它们</p></blockquote><h3 id="_5-非实时绑定的表单项" tabindex="-1">5.非实时绑定的表单项 <a class="header-anchor" href="#_5-非实时绑定的表单项" aria-label="Permalink to &quot;5.非实时绑定的表单项&quot;">​</a></h3><blockquote><p>当使用 ==v-model== 绑定一个表单项时，当用户改变表单项的状态时，也会随之改变数据，从而导致 ==vue== 发生重新渲染（==rerender==），这会带来一些性能的开销。</p><p>我们可以通过使用 ==lazy== 或不使用 ==v-model== 的方式解决该问题，但要注意，这样可能会导致在某一个时间段内数据和表单项的值是不一致的。</p></blockquote><h3 id="_6-保持对象引用稳定" tabindex="-1">6.保持对象引用稳定 <a class="header-anchor" href="#_6-保持对象引用稳定" aria-label="Permalink to &quot;6.保持对象引用稳定&quot;">​</a></h3><blockquote><p>在绝大部分情况下， ==vue== 触发 ==rerender== 的时机是其依赖的数据发生变化</p><p>若数据发生变化，哪怕给数据重新赋值了，==vue== 也是不会做出任何处理的</p><p>下面是 ==vue== 判断数据没有变化的源码</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hasChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // === 也不一定相等</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // +0 === -0 返回为 true  1 / +0 值为 Infinity  1 / -0 值为 -Infinity</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // x !== y</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 判断 x 和 y 是否为 NaN</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 原理： NaN === NaN 返回为 false  NaN !== NaN 返回为 true</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p>因此，如果需要，只要能保证组件的依赖数据不发生变化，组件就不会重新渲染。</p><p>对于原始数据类型，保持其值不变即可</p><p>对于对象类型，保持其引用不变即可</p><p>从另一方面来说，由于可以通过保持属性引用稳定来避免子组件的重渲染，那么我们应该细分组件来尽量避免多余的渲染。</p></blockquote><h3 id="_7-使用-v-show-替代-v-if" tabindex="-1">7.使用 v-show 替代 v-if <a class="header-anchor" href="#_7-使用-v-show-替代-v-if" aria-label="Permalink to &quot;7.使用 v-show 替代 v-if&quot;">​</a></h3><blockquote><p>对于频繁切换显示状态的元素，使用 v-show 可以保证虚拟 DOM 树的稳定，避免频繁的新增和删除元素，特别是对于那些内部包含大量 DOM 元素的节点，这一点极其重要。</p><p>关键字：频繁切换显示状态，内部包含大量 DOM 元素。</p></blockquote><h3 id="_8-使用延迟装载-defer" tabindex="-1">8.使用延迟装载（defer） <a class="header-anchor" href="#_8-使用延迟装载-defer" aria-label="Permalink to &quot;8.使用延迟装载（defer）&quot;">​</a></h3><blockquote><p>JS 传输完成后，浏览器开始执行 JS 构造页面。</p><p>但可能一开始要渲染的组件太多，不仅 JS 执行的时间很长，而且执行完后浏览器要渲染的元素过多，从而导致页面白屏</p><p>一个可行的办法就是延迟装载组件，让组件按照指定的先后顺序依次一个一个渲染出来</p><blockquote><p>延迟装载是一个思路，本质就是利用 requestAnimationFrame 事件分批渲染内容，它的具体实现多种多样。</p></blockquote></blockquote>',25)]))}]]);export{e as __pageData,l as default};
