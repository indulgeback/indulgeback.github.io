import{_ as t,c as d,G as i,b as r}from"./chunks/framework.BrC0DRXd.js";const e=JSON.parse('{"title":"Git 基础教程","description":"介绍了Git的基础概念、基本使用、基本命令、分支管理、远程仓库、多人协同开发、VSCode中使用Git","frontmatter":{"title":"Git 基础教程","date":"2023-07-01T00:00:00.000Z","author":"liuwy","categories":["技术"],"tags":["Git"],"description":"介绍了Git的基础概念、基本使用、基本命令、分支管理、远程仓库、多人协同开发、VSCode中使用Git","articleGPT":"介绍了Git的基础概念、基本使用、基本命令、分支管理、远程仓库、多人协同开发、VSCode中使用Git","head":[["link",{"rel":"canonical","href":"https://blog.imsyy.top/posts/前端工具/1、Git 基础教程"}]]},"headers":[],"relativePath":"posts/前端工具/1、Git 基础教程.md","filePath":"posts/前端工具/1、Git 基础教程.md","lastUpdated":1740135853000}');const a=t({name:"posts/前端工具/1、Git 基础教程.md"},[["render",function(t,e,a,p,o,g){return r(),d("div",null,e[0]||(e[0]=[i('<h2 id="_01-git-初识" tabindex="-1">01.Git 初识 <a class="header-anchor" href="#_01-git-初识" aria-label="Permalink to &quot;01.Git 初识&quot;">​</a></h2><ol><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Git" target="_blank" rel="noreferrer">概念</a>：一个免费开源，分布式的代码版本控制系统，帮助开发团队维护代码</p></li><li><p>作用：记录代码内容，切换代码版本，多人开发时高效合并代码内容</p></li><li><p>如何学：</p><p>个人本机使用：Git 基础命令和概念</p><p>多人共享使用：团队开发同一个项目的代码版本管理</p></li></ol><p><a href="https://git-scm.com/" target="_blank" rel="noreferrer">Windows</a><a href="https://git-scm.com/" target="_blank" rel="noreferrer">系统</a>：exe 程序，默认下一步即可</p><p>Mac系统：dmg 程序，默认下一步即可</p><p>检验成功：</p><p>1.打开 bash 终端（git 专用）</p><p>2.命令：git -v（查看版本号）</p><p>配置：用户名和邮箱，应用在每次提交代码版本时表明自己身份</p><p>命令：</p><p>git config --global user.name &quot;用户名&quot;</p><p>git config --global user.email &quot;用户邮箱&quot;</p><h2 id="_02-git-仓库" tabindex="-1">02.Git 仓库 <a class="header-anchor" href="#_02-git-仓库" aria-label="Permalink to &quot;02.Git 仓库&quot;">​</a></h2><p>Git 仓库（repository）：记录文件状态内容的地方，存储着修改的历史记录</p><p>创建：</p><p>1.把本地文件夹转换成 Git 仓库：命令 git init</p><p>2.从其他服务器上克隆 Git 仓库</p><h2 id="_03-git-的三个区域" tabindex="-1">03.Git 的三个区域 <a class="header-anchor" href="#_03-git-的三个区域" aria-label="Permalink to &quot;03.Git 的三个区域&quot;">​</a></h2><p>Git 使用时：</p><p>工作区：实际开发时操作的文件夹</p><p>暂存区：保存之前的准备区域（暂存改动过的文件）</p><p>版本库：提交并保存暂存区中的内容，产生一个版本快照</p><div class="table-container"><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>git add 文件名</td><td>暂存指定文件</td></tr><tr><td>git add .</td><td>暂存所有改动的文件</td></tr><tr><td>git commit -m &quot;注释说明&quot;</td><td>提交并保存，产生版本快照</td></tr></tbody></table></div><h2 id="_04-git-文件状态" tabindex="-1">04.Git 文件状态 <a class="header-anchor" href="#_04-git-文件状态" aria-label="Permalink to &quot;04.Git 文件状态&quot;">​</a></h2><p>Git 文件 2 种状态：</p><p>ü未跟踪：新文件，从未被 Git 管理过</p><p>ü已跟踪：Git 已经知道和管理的文件</p><div class="table-container"><table><thead><tr><th><strong>文件状态</strong></th><th><strong>概念</strong></th><th><strong>场景</strong></th></tr></thead><tbody><tr><td>未跟踪（U）</td><td>从未被 Git 管理过</td><td>新文件</td></tr><tr><td>新添加（A）</td><td>第一次被 Git 暂存</td><td>之前版本记录无此文件</td></tr><tr><td>未修改（&#39;&#39;）</td><td>三个区域统一</td><td>提交保存后</td></tr><tr><td>已修改（M）</td><td>工作区内容变化</td><td>修改了内容产生</td></tr></tbody></table></div><p>使用：修改文件，暂存，提交保存记录，如此反复</p><h2 id="_05-git-暂存区作用" tabindex="-1">05.Git 暂存区作用 <a class="header-anchor" href="#_05-git-暂存区作用" aria-label="Permalink to &quot;05.Git 暂存区作用&quot;">​</a></h2><p>暂存区：暂时存储，可以临时恢复代码内容，与版本库解耦</p><p>暂存区 -&gt; 覆盖 -&gt; 工作区，命令：git restore 目标文件（注意：完全确认覆盖时使用）</p><p>从暂存区移除文件，命令：git rm --cached 目标文件</p><h2 id="_06-git-切换版本" tabindex="-1">06.Git-切换版本 <a class="header-anchor" href="#_06-git-切换版本" aria-label="Permalink to &quot;06.Git-切换版本&quot;">​</a></h2><p>概念：把版本库某个版本对应的内容快照，恢复到工作区/暂存区</p><p>查看提交历史：git log --oneline</p><p>回退命令：</p><p>git reset --soft 版本号（其他文件未跟踪）</p><p>git reset --hard 版本号</p><p>git reset --mixed 版本号 （与 git reset 等价）</p><p>注意1：只有记录在版本库的提交记录才能恢复</p><p>注意2：回退后，继续修改-&gt;暂存-&gt;提交操作即可（产生新的提交记录过程）</p><h2 id="_07-删除文件" tabindex="-1">07.删除文件 <a class="header-anchor" href="#_07-删除文件" aria-label="Permalink to &quot;07.删除文件&quot;">​</a></h2><p>需求：删除 editor.js 文件，并产生一次版本记录</p><p>步骤：</p><p>1.手动删除工作区文件</p><p>2.暂存变更/手动删除暂存区文件造成变更</p><p>3.提交保存</p><p>总结：</p><p>工作区只要改变，都可以暂存提交产生新记录</p><h2 id="_08-忽略文件" tabindex="-1">08.忽略文件 <a class="header-anchor" href="#_08-忽略文件" aria-label="Permalink to &quot;08.忽略文件&quot;">​</a></h2><p>概念：.gitignore 文件可以让 git 彻底忽略跟踪指定文件</p><p>目的：让 git 仓库更小更快，避免重复无意义的文件管理</p><p>例如：</p><p>1.系统或软件自动生成的文件</p><p>2.编译产生的结果文件</p><p>3.运行时生成的日志文件，缓存文件，临时文件等</p><p>4.涉密文件，密码，秘钥等文件</p><p>创建：</p><p>1.项目根目录新建 .gitignore 文件</p><p>2.填入相应配置来忽略指定文件</p><p>注意：如果文件已经被暂存区跟踪过，可以从暂存区移除即可</p><h2 id="_09-分支的概念" tabindex="-1">09.分支的概念 <a class="header-anchor" href="#_09-分支的概念" aria-label="Permalink to &quot;09.分支的概念&quot;">​</a></h2><p>概念：本质上是指向提交节点的可变指针，默认名字是 master</p><p>注意：HEAD 指针影响工作区/暂存区的代码状态</p><p>场景：开发新需求 / 修复 Bug，保证主线代码随时可用，多人协同开发提高效率</p><p>例如：</p><p>在现有代码上创建新分支完成内容列表业务</p><p>突然需要紧急修复 Bug - 单独创建分支解决 Bug</p><p>需求：创建内容列表 content 分支，并产生 3 次提交记录</p><p>步骤：</p><ol><li><p>创建分支命令：git branch 分支名</p></li><li><p>切换分支命令：git checkout 分支名</p></li><li><p>工作区准备代码并暂存提交，重复 3 次</p></li></ol><h2 id="_10-练习-登录-bug-修复" tabindex="-1">10.练习-登录 bug 修复 <a class="header-anchor" href="#_10-练习-登录-bug-修复" aria-label="Permalink to &quot;10.练习-登录 bug 修复&quot;">​</a></h2><p>需求：新建 login-bug 分支，做 2 次提交记录（对手机号长度，验证码长度做判断）</p><p>步骤：</p><p>1.切回到主分支：git checkout master</p><p>2.创建新分支：git branch login-bug</p><p>3.切换新分支：git checkout login-bug</p><p>4.修改代码，暂存，提交产生版本记录</p><h2 id="_11-分支-合并与删除" tabindex="-1">11.分支-合并与删除 <a class="header-anchor" href="#_11-分支-合并与删除" aria-label="Permalink to &quot;11.分支-合并与删除&quot;">​</a></h2><p>需求：把 login-bug 合并回到 master 分支并删除 login-bug 分支</p><p>步骤：</p><p>1.切回到要合入的分支上：git checkout master</p><p>2.合并其他分支过来：git merge login-bug</p><p>3.删除合并后的分支指针：git branch -d login-bug</p><h2 id="_12-分支-合并与提交" tabindex="-1">12.分支-合并与提交 <a class="header-anchor" href="#_12-分支-合并与提交" aria-label="Permalink to &quot;12.分支-合并与提交&quot;">​</a></h2><p>合并提交：发生于原分支产生了新的提交记录后，再合并回去时发生，自动使用多个快照记录合并后产生一次新的提交</p><p>步骤：</p><p>1.切回到要合入的分支上：git checkout master</p><p>2.合并其他分支过来：git merge content</p><p>3.删除合并后的分支：git branch -d content</p><p>最后合并回到主分支上时，提交记录流程图：</p><p>注意：提交记录的顺序按照产生的先后顺序排列，而非合并的先后顺序</p><h2 id="_13-分支-合并冲突" tabindex="-1">13.分支-合并冲突 <a class="header-anchor" href="#_13-分支-合并冲突" aria-label="Permalink to &quot;13.分支-合并冲突&quot;">​</a></h2><p>需求1：基于 master 新建 publish 分支，完成发布文章业务，然后修改内容页面的 html 文件的 title 标签，并提交一次</p><p>需求2：切换到 master，也在修改内容页面的 html 文件的 title 标签，并提交一次</p><p>冲突：把 publish 分支合并到 master 回来，产生合并冲突</p><p>概念：不同分支中，对同一个文件的同一部分修改，Git 无法干净的合并，产生合并冲突</p><p>解决：</p><p>1.打开 VSCode 找到冲突文件并手动解决</p><p>2.解决后需要提交一次记录</p><p>避免：（多交流）</p><p>1.按页面划分不同分支开发</p><p>2.公共代码在统一文件夹维护</p><p>3.Node等软件版本统一，npm 包统一下载</p><h2 id="_14-git-常用命令" tabindex="-1">14.Git 常用命令 <a class="header-anchor" href="#_14-git-常用命令" aria-label="Permalink to &quot;14.Git 常用命令&quot;">​</a></h2><div class="table-container"><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th><th><strong>注意</strong></th></tr></thead><tbody><tr><td>git -v</td><td>查看 git 版本</td><td></td></tr><tr><td>git init</td><td>初始化 git 仓库</td><td></td></tr><tr><td>git add 文件标识</td><td>暂存某个文件</td><td>文件标识以终端为起始的相对路径</td></tr><tr><td>git add .</td><td>暂存所有文件</td><td></td></tr><tr><td>git commit -m &#39;说明注释&#39;</td><td>提交产生版本记录</td><td>每次提交，把暂存区内容快照一份</td></tr><tr><td>git status</td><td>查看文件状态 - 详细信息</td><td></td></tr><tr><td>git status -s</td><td>查看文件状态 - 简略信息</td><td>第一列是暂存区状态，第二列是工作区状态</td></tr><tr><td>git ls-files</td><td>查看暂存区文件列表</td><td></td></tr><tr><td>git restore 文件标识</td><td>从暂存区恢复到工作区</td><td>如果文件标识为 . 则恢复所有文件</td></tr><tr><td>git rm --cached 文件标识</td><td>从暂存区移除文件</td><td>不让 git 跟踪文件变化</td></tr><tr><td>git log</td><td>查看提交记录 - 详细信息</td><td></td></tr><tr><td>git log --oneline</td><td>查看提交记录 - 简略信息</td><td>版本号 分支指针 提交时说明注释</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th><th><strong>注意</strong></th></tr></thead><tbody><tr><td>git reflog --oneline</td><td>查看完整历史 - 简略消息</td><td>包括提交，切换，回退等所有记录</td></tr><tr><td>git reset 版本号</td><td>切换版本代码到暂存区和工作区</td><td>--soft 模式保留暂存区和工作区原本内容 --hard 模式不保留暂存区和工作区原本内容 --mixed 模式不保留暂存区，工作区保留（默认） 先覆盖到暂存区，再用暂存区对比覆盖工作区</td></tr><tr><td>git branch 分支名</td><td>创建分支</td><td></td></tr><tr><td>git branch</td><td>查看本地分支</td><td></td></tr><tr><td>git branch -d 分支名</td><td>删除分支</td><td>请确保记录已经合并到别的分支下，再删除分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td><td></td></tr><tr><td>git checkout -b 分支名</td><td>创建并立刻切换分支</td><td></td></tr><tr><td>git merge 分支名</td><td>把分支提交历史记录合并到当前所在分支</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table></div><h2 id="_15-git-远程仓库" tabindex="-1">15.Git 远程仓库 <a class="header-anchor" href="#_15-git-远程仓库" aria-label="Permalink to &quot;15.Git 远程仓库&quot;">​</a></h2><p>概念：托管在因特网或其他网络中的你的项目的版本库</p><p>作用：保存版本库的历史记录，多人协作</p><p>创建：公司自己服务器 / 第三方托管平台（Gitee，GitLab，GitHub...）</p><p>需求：创建远程版本库，并把本地 Git 仓库推送上去保存</p><p>步骤：</p><p>1.注册第三方托管平台网站账号</p><p>2.新建仓库得到远程仓库 Git 地址</p><p>3.本地 Git 仓库添加远程仓库原点地址</p><p>命令：git remote add 远程仓库别名 远程仓库地址</p><p>例如：git remote add origin <a href="https://gitee.com/lidongxu/work.git" target="_blank" rel="noreferrer">https://gitee.com/lidongxu/work.git</a></p><p>4.本地 Git 仓库推送版本记录到远程仓库</p><p>命令：git push -u 远程仓库别名 本地和远程分支名</p><p>例如：git push -u origin master</p><p>完整写法：git push --set-upstream origin master:master</p><h2 id="_16-git-远程仓库-克隆" tabindex="-1">16.Git 远程仓库 - 克隆 <a class="header-anchor" href="#_16-git-远程仓库-克隆" aria-label="Permalink to &quot;16.Git 远程仓库 - 克隆&quot;">​</a></h2><p>克隆：拷贝一个 Git 仓库到本地，进行使用</p><p>命令：git clone 远程仓库地址，例如：git clone <a href="https://gitee.com/lidongxu/work.git" target="_blank" rel="noreferrer">https://gitee.com/lidongxu/work.git</a></p><p>效果：在运行命令所在文件夹，生成 work 项目文件夹（包含版本库，并映射到暂存区和工作区）</p><p>注意1：Git 本地仓库已经建立好和远程仓库的链接</p><p>注意2：仓库公开随意克隆，推送需要身为仓库团队成员</p><h2 id="_17-多人协同开发" tabindex="-1">17.多人协同开发 <a class="header-anchor" href="#_17-多人协同开发" aria-label="Permalink to &quot;17.多人协同开发&quot;">​</a></h2><p>需求：小传新代码共享给小智</p><p>步骤：</p><p>1.小传开发代码 -&gt; 工作区 -&gt; 暂存区 -&gt; 提交 -&gt; 拉取（可选）-&gt; 推送</p><p>2.小智 -&gt; 拉取（后续也可以开发代码 -&gt; ... -&gt; 推送）</p><p>3.想要看到别人同步上去的最新内容：git pull origin master 等价于</p><p>git fetch origin master:master（获取远程分支记录到本地，未合并）</p><p>git merge origin/master (把远程分支记录合并到所在分支下）</p><h2 id="_18-vscode-中使用-git" tabindex="-1">18.VSCode 中使用 Git <a class="header-anchor" href="#_18-vscode-中使用-git" aria-label="Permalink to &quot;18.VSCode 中使用 Git&quot;">​</a></h2><p>使用：源代码管理，进行暂存，撤销，对比差异，提交等操作</p><p>注意：VSCode 打开的项目文件夹下需要有 .git 仓库</p><h2 id="_19-git-常用命令" tabindex="-1">19.Git 常用命令 <a class="header-anchor" href="#_19-git-常用命令" aria-label="Permalink to &quot;19.Git 常用命令&quot;">​</a></h2><div class="table-container"><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th><th><strong>注意</strong></th></tr></thead><tbody><tr><td>git remote add 远程仓库别名 远程仓库地址</td><td>添加远程仓库地址</td><td>别名唯一，地址是 .git 结尾的网址</td></tr><tr><td>git remote -v</td><td>查看远程仓库地址</td><td></td></tr><tr><td>git remote remove 远程仓库别名</td><td>删除远程仓库地址</td><td></td></tr><tr><td>git pull 远程仓库别名 分支名</td><td>拉取</td><td>完整写法：git pull 远程仓库别名 远程分支名:本地分支名 等价于：git fetch 和 git merge</td></tr><tr><td>git push 远程仓库别名 分支名</td><td>推送</td><td>完整写法：git push 远程仓库别名 本地分支名:远程分支名 -u：建立通道后以后可以简写 git push</td></tr><tr><td>git pull --rebase 远程仓库别名 分支名</td><td>拉取合并</td><td>合并没有关系的记录</td></tr><tr><td>git clone 远程仓库地址</td><td>克隆</td><td>从0得到一个远程的Git仓库到本地使用</td></tr></tbody></table></div>',141)]))}]]);export{e as __pageData,a as default};
