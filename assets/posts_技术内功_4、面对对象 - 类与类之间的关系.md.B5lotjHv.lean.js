import{_ as a,c as e,G as t,b as r}from"./chunks/framework.BrC0DRXd.js";const i=JSON.parse('{"title":"面对对象 - 类与类之间的关系","description":"介绍了类与类之间的关系","frontmatter":{"title":"面对对象 - 类与类之间的关系","date":"2024-11-13T00:00:00.000Z","author":"liuwy","categories":["技术"],"tags":["面向对象","OOP"],"description":"介绍了类与类之间的关系","articleGPT":"介绍了类与类之间的关系，包括继承、实现、依赖、关联、聚合、组合，他们的耦合度依次增强。","head":[["link",{"rel":"canonical","href":"https://blog.imsyy.top/posts/技术内功/4、面对对象 - 类与类之间的关系"}]]},"headers":[],"relativePath":"posts/技术内功/4、面对对象 - 类与类之间的关系.md","filePath":"posts/技术内功/4、面对对象 - 类与类之间的关系.md","lastUpdated":1740135853000}');const o=a({name:"posts/技术内功/4、面对对象 - 类与类之间的关系.md"},[["render",function(a,i,o,s,n,h){return r(),e("div",null,i[0]||(i[0]=[t('<p><strong>类与类之间主要有6种关系，分别是：依赖、关联、聚合、组合、继承、实现，他们的耦合度依次增强。其中，关联、聚合和组合关系仅仅是在语义上有所区别，所谓语义就是指上下文环境、特定情景等，它们在编程语言中的体现却是基本相同的。</strong></p><h2 id="继承关系-is-a" tabindex="-1">继承关系（IS - A） <a class="header-anchor" href="#继承关系-is-a" aria-label="Permalink to &quot;继承关系（IS - A）&quot;">​</a></h2><p>继承（Inheritance），即“is-a”关系。继承指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力。在Java中继承关系通过关键字extends明确标识，在设计时一般没有争议性。</p><h2 id="实现关系" tabindex="-1">实现关系 <a class="header-anchor" href="#实现关系" aria-label="Permalink to &quot;实现关系&quot;">​</a></h2><p>实现（Implementation），实现指的是一个class类实现interface接口（可以是多个）的功能，实现是类与接口之间最常见的关系。在Java中此类关系通过关键字implements明确标识，在设计时一般没有争议性。</p><h2 id="依赖关系" tabindex="-1">依赖关系 <a class="header-anchor" href="#依赖关系" aria-label="Permalink to &quot;依赖关系&quot;">​</a></h2><p>依赖（Dependence），即“uses-a”关系。简单的理解，依赖就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是类B的变化会影响到类A。表现在代码层面，为类B作为参数被类A在某个method方法中使用。</p><p>一般而言，依赖关系在JAVA中体现为局域变量、方法的形参，或者对静态方法的调用。</p><h2 id="关联关系" tabindex="-1">关联关系 <a class="header-anchor" href="#关联关系" aria-label="Permalink to &quot;关联关系&quot;">​</a></h2><p>关联(Association），是类与类之间的联接。关联体现的是两个类之间语义级别的一种强依赖关系，比如我和我的朋友，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的。关联可以是单向、双向的。表现在代码层面，为被关联类B以类的属性形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量。</p><h2 id="聚合关系" tabindex="-1">聚合关系 <a class="header-anchor" href="#聚合关系" aria-label="Permalink to &quot;聚合关系&quot;">​</a></h2><p>聚合（Aggregation），聚合是关联关系的一种特例，它体现的是整体与部分的关系，即has-a的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。比如计算机与CPU、公司与员工的关系等，比如一个航母编队包括海空母舰、驱护舰艇、舰载飞机及核动力攻击潜艇等。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。</p><h2 id="组合关系" tabindex="-1">组合关系 <a class="header-anchor" href="#组合关系" aria-label="Permalink to &quot;组合关系&quot;">​</a></h2><p>组合(Composition) ，即“contain-a”关系，组合也是关联关系的一种特例，这种关系比聚合更强，也称为强聚合。它同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束，比如人和人的大脑。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。</p>',14)]))}]]);export{i as __pageData,o as default};
